{
	"Create main.py file for a MultiViz connector plugin": {
		"prefix": "mv-connector",
		"body": [
			"import os",
			"from datetime import datetime, timedelta",
			"from dateutil.parser import parse",
			"from downloader_service.downloader import Downloader",
			"import tempfile",
			"",
			"",
			"def run(argv, multiviz):",
			"   try:",
			"      # Retrieve job information",
			"      _, _, _, output, _, input = multiviz.parse_segment_job(argv)",
			"",
			"      # Get required parameters for a connector",
			"      parameters = multiviz.get_parameter_value(input, 'parameters')",
			"      stop_date = parse(parameters['stop_date']) if 'stop_date' in parameters else datetime.now()",
			"      start_date = parse(parameters['start_date']) if 'start_date' in parameters else stop_date - timedelta(days=14)",
			"      project_id = parameters['project_id'] if 'project_id' in parameters else None",
			"      task = parameters['task']",
			"",
			"      # Get connector specific custom parameters (defined in extension.json)",
			"      # TODO: extract additional (plugin specific) parameters here",
			"      #username = parameters['username']",
			"      #password = parameters['password']",
			"      param1 = parameters['param1']",
			"",
			"      # Do requested task",
			"      if task == 'get_instrumentation':",
			"         # TODO: replace the code below with code that provides instrumentation data",
			"         # CSV/dataframe format:",
			"         #  ChannelId,Name,Description,MinValue,MaxValue,Timeout,Unit",
			"         #  F1,Furnace1,comment one...,-1,200,10,K",
			"         #  F2,Furnace2,comment 222...,-100,100,10,m",
			"         df = pd.read_csv(path)",
			"         instrumentation = df.describe().to_dict()",
			"",
			"         # Pass instrumentation data back to MultiViz",
			"         multiviz.write_output(output, {",
			"            'success': True,",
			"            'instrumentation': instrumentation",
			"         })",
			"      elif task == 'import_data': ",
			"         # TODO: put your code for importing the data here...",
			"         df = my_connector_read_data()",
			"",
			"         # Upload data to MultiViz (which will create a new case study)",
			"         path = tempfile.TemporaryFile().name + '.csv'",
			"         df.to_csv(path, index=True) # TODO: sometimes the index is not needed (if it is already in the dataframe as column 0)",
			"         with open(path) as f:",
			"            contents = f.read()",
			"            file_id = multiviz.upload_datafile(",
			"               'datafile.csv',",
			"               description='TODO: enter the name for the case study here...',",
			"               project_id=project_id,",
			"               contents=contents)",
			"",
			"         multiviz.write_output(output, {",
			"            'success': True,",
			"            'file_id': file_id",
			"         })",
			"",
			"         if os.path.isfile(path):",
			"            os.remove(path)                ",
			"      else:",
			"         raise Exception('Unknown or missing task parameter')",
			"",
			"   except Exception as e:",
			"      multiviz.write_output(output, {",
			"         'success': False,",
			"         'error': str(e)",
			"      })"
		],
		"description": "Create MultiViz connector plugin main.py file."
	},
	"Create main.py file for a MultiViz analyze plugin": {
		"prefix": "mv-analyze",
		"body": [
			"import os",
			"import pandas as pd",
			"import tempfile",
			"import matplotlib.pyplot as plt",
			"",
			"",
			"def run(argv, multiviz):",
			"   try:",
			"      # Get plugin inputs",
			"      url, start, stop, output, file_id, _input = multiviz.parse_segment_job(argv)",
			"",
			"      # Get data channels for the plugin",
			"      # TODO: put back if the plugin should only work with the selected channels (current view in MultiViz)",
			"      # usecols = multiviz.get_usecols(_input)",
			"      usecols = None",
			"",
			"      # Load data (loads the MV case study datafile)",
			"      df = multiviz.read_csv(file_id, start, stop, url, virtual_channels=multiviz.get_virtual_channels(_input), usecols=usecols)    ",
			"",
			"      # TODO: replace the code below with your analyze code/algorithm/ML model/...",
			"      # df = df.set_index(df.columns[0])",
			"      # df.index = pd.to_datetime(df.index)",
			"      # y = df",
			"      # dt = y.index.to_series().diff().dt.total_seconds().iloc[1:]",
			"      # dy = y.diff().iloc[1:]",
			"      # derivative = pd.DataFrame([dy.iloc[row, :] / dt.iloc[row] for row in range(dy.shape[0])])",
			"      # sum_dy = abs(derivative).sum(axis=1)        ",
			"      # df = sum_dy # pd.DataFrame(sum_dy)",
			"      df = my_algorithm(df)",
			"",
			"      # Save and upload the output date (new Pandas Series)",
			"      temp_csv = tempfile.TemporaryFile().name + '.csv'",
			"      df.to_csv(temp_csv, index=False)",
			"      multiviz.upload_job_output(temp_csv, 'data.csv')",
			"      multiviz.write_output(output, {",
			"         'success': True,",
			"         'data_file': 'data.csv'",
			"      })",
			"      multiviz.write_output(output, {",
			"         'success': True,",
			"         'plot_image_file': 'plot.png'",
			"      })",
			"",
			"   except Exception as e:",
			"      multiviz.write_output(output, {",
			"         'success': False,",
			"         'error': str(e)",
			"      })"
		]
	},
	"Create main.py file for a MultiViz report plugin": {
		"prefix": "mv-report",
		"body": [
			"import os",
			"import pandas as pd",
			"import tempfile",
			"import matplotlib.pyplot as plt",
			"",
			"",
			"def run(argv, multiviz):",
			"   try:",
			"       # Get plugin inputs",
			"       url, start, stop, output, file_id, _input = multiviz.parse_segment_job(argv)",
			"",
			"       # Load data (loads the MV case study datafile)",
			"       df = multiviz.read_csv(file_id, start, stop, url, virtual_channels=multiviz.get_virtual_channels(_input))    ",
			"",
			"       # TODO: replace the code below with your report generation code",
			"",
			"       # Demo: Save and upload the output date (new Pandas Series)",
			"       df_out = pd.DataFrame([[1, 2, 3, 4], [1.1, 2.3, 5.4, 8.7]])",
			"       temp_csv = tempfile.TemporaryFile().name + '.csv'",
			"       df_out.to_csv(temp_csv, index=False)",
			"       multiviz.upload_job_output(temp_csv, 'report.csv')",
			"",
			"       # Demo: Create a plot",
			"       import matplotlib.pyplot as plt",
			"       t = df.iloc[:,0] # timestamps (x axis)",
			"       data = df.iloc[:,1:]  # data (y axis)",
			"       plt.plot(t, data)",
			"       temp_png = tempfile.TemporaryFile().name + '.png'",
			"       plt.savefig(temp_png)",
			"       file_id = multiviz.upload_job_output(temp_png, 'plot.png')",
			"",
			"       # Demo: Create HTML code",
			"       df_table = df.iloc[:10, :4]",
			"       html = df_table.to_html()",
			"",
			"       # Save possible report file, image and html code below (do not include item if there is no output, e.g. skip report_image if none is saved/output) ",
			"       multiviz.write_output(output, {",
			"          'success': True,",
			"          'report_file': 'report.csv',",
			"          'report_image': 'plot.png',",
			"          'report_html': html",
			"       })",
			"",
			"   except Exception as e:",
			"       multiviz.write_output(output, {",
			"          'success': False,",
			"          'error': str(e)",
			"       })"
		]
	}
}